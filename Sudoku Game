int[][] sudoku = new int[9][9];
int[] blank = new int [9]; // how many blank
int[][] whereBlank = new int[9][3]; // where are that blank
int[] num = new int[9];
boolean howHard = false;
int w, h, clickx, clicky, numRandom;

void setup(){
  size(900, 950);
  background(255);
  w = 900/9;
  h = 900/9;
  
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      sudoku[i][j] = 0;
    }
  }
  solveSudoku();
  whatRandom();
}

void draw(){
  grid();
  textSize(100);
  int i = 0;
  while(i < 9){
    int c = 0;
    while(c < 9){
      fill(50);
      text(sudoku[i][c], 25+c*w, 33+h+i*h);
      c++;
    }
    i++;
  }
}

void grid(){
  strokeWeight(3);
  stroke(150);
  int i = 0;
  while(i < 9){
    int c = 0;
    while(c < 9){
      fill(255, 255, 255, 0);
      rect(c*w, 50+i*h, w, h);
      c++;
    }
    i++;
  }
  strokeWeight(6);
  stroke(0);
  i = 0;
  while(i < 3){
    int c = 0;
    while(c < 9){
      fill(255, 255, 255, 0);
      rect(c*w*3, 50+i*h*3, w*3, h*3);
      c++;
    }
    i++;
  }
  strokeWeight(4);
  textSize(20);
  i = 0;
  while (i < 2){
    fill(255, 255, 255, 0);
    rect(10+i*130, 5, 120, 35);
    i++;
  }
  fill(0);
  text("Easy", 50, 30);
  text("Medium", 166, 30);
}

boolean check(int row, int col, int num) {
  for (int i = 0; i < 9; i++) {
    if (sudoku[row][i] == num) {
      return false;
    }
  }
  for (int i = 0; i < 9; i++) {
    if (sudoku[i][col] == num){
      return false;
    }
  }
  int boxRow = row / 3;
  int boxCol = col / 3;
  for (int i = boxRow * 3; i < boxRow * 3 + 3; i++) {
    for (int j = boxCol * 3; j < boxCol * 3 + 3; j++) {
      if (sudoku[i][j] == num) {
        return false;
      }
    }
  }
  return true;   
}

boolean solveSudoku() {
  for (int row = 0; row < 9; row++) {
    for (int col = 0; col < 9; col++) {
      if (sudoku[row][col] == 0) {
        for (int num = 1; num <= 9; num++) {
          if (check(row, col, num)) {
            sudoku[row][col] = num;
            if (solveSudoku())   
 return true;
            sudoku[row][col] = 0;
          }
        }
        return false;
      }
    }
  }
  return true;   
}

void mousePressed(){
  clickx = mouseX;
  clicky = mouseY;
  
  if (5 < clicky && clicky < 41 && 10 < clickx && clickx < 261){
    if (10 < clickx && clickx < 131){
      howHard = false;
      whatRandom();
    } else if ( 130 < clickx && clickx < 261){
      howHard = true;
      whatRandom();
    }
  }
  
}

void whatRandom(){
  int i = 0;
  while (i < 9){
    if (howHard == false){
      numRandom = int(random(7, 8));
    } else if (howHard == true){
      numRandom = int(random(6, 7));
    }
    blank[i] = numRandom;
    println(blank[i]);
    i++;
  }
  int c = 0;
  while (c < 9){
    i = 0;
    int i0 = 0;
    num = new int[9];
    while(i0 < 9){
        num[i0] = i0;
        i0++;
      }
    while (i < blank[i]){
      int rnum = int(random(0, 8-i));
      num = removeAtIndex(num, rnum);
      i++;
    }
    whereBlank[c] = new int[num.length];
    i = 0;
    int k = 0;
    while (k < num.length){
      if (k == num.length -1){
        int randoma = int(random(0, 8));
        while (randoma == whereBlank[c][k-1]){
          randoma = int(random(0, 8));
        }
        if (num.length == 3){
          while (randoma == whereBlank[c][k-2] | randoma == whereBlank[c][k-1]){
            randoma = int(random(0, 8));
            println("aa");
          }
        }
        whereBlank[c][k] = randoma;
        println("a");
      } else {
        whereBlank[c][k] = num[k];
        println("b");
      }
      k++;
    }
    c++;
  }
  println("complete");
  println(whereBlank[8]);
}

int[] removeAtIndex(int[] a, int i) {
  int[] newA = new int[a.length - 1];
  int c = 0;
  int k = 0;
  while (c < a.length) {
    if (c == i) {
      c++;
      newA[k] = a[c];
    } else{
      newA[k] = a[c];
    }
    k++;
    c++;
  }
  println(newA);
  return newA;
}
