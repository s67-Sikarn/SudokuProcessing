import java.io.File;
PrintWriter writer;

int[][] sudoku = new int[9][9]; // all sudoku number
int[] blank = new int [9]; // how many blank
int[][] whereBlank = new int[9][3]; // where are that blank
int[] num = new int[9]; // use in whatRandom and removeIndex
int [][] input = new int[9][9];
boolean isItX; //check click x is in whereBlank or not
boolean howHard = false; // easy or medium mode
int w, h, clickx, clicky, numRandom, realX, score;

void setup(){
  size(900, 950);
  w = 900/9;
  h = 900/9;
  
  for (int i = 0; i < 9; i++){
    for (int j = 0; j < 9; j++){
      sudoku[i][j] = 0;
    }
  }
  input();
  solveSudoku();
}

int[][] input(){ // setup input
  int i = 0;
  while (i < 9){
    int c = 0;
    while (c < 3){
      input[i][c] = 0;
      c++;
    }
    i++;
  }
  return input;
}

void draw(){
  background(255);
  textSize(100);
  int i = 0;
  while(i < 9){
    int c = 0;
    while(c < 9){
      fill(50);
      text(sudoku[i][c], 25+c*w, 33+h+i*h);
      c++;
    }
    i++;
  }
  makeItBlank();
  if (isItX() == true){
        fill(30,0,255,30);
        rect(clickx/100*w, 50 + (clicky - 50)/100*h, w, h);
      }
  grid();
  if (scoreLeft() == 0){
    background(255);
    textSize(80);
    text("You win!",310,500); //
  }
}

void makeItBlank(){
  strokeWeight(1);
  int i = 0;
  while (i < 9){
    int c = 0;
    while (c < whereBlank[i].length){
      fill(255);
      rect(whereBlank[i][c]*w, 50 + i*h, w, h);
      if (input[i][c] == 0){
        fill(255);
        text(input[i][c], 25 + whereBlank[i][c]*w, 133 + i*h);
      }else if (input[i][c] > 0){
        fill(0,0,255,255);
        text(input[i][c], 25 + whereBlank[i][c]*w, 133 + i*h);
      }
      c++;
    }
    i++;
  }
}

void grid(){
  strokeWeight(3);
  stroke(150);
  int i = 0;
  while(i < 9){
    int c = 0;
    while(c < 9){
      fill(255, 255, 255, 0);
      rect(c*w, 50+i*h, w, h);
      c++;
    }
    i++;
  }
  strokeWeight(6);
  stroke(0);
  i = 0;
  while(i < 3){
    int c = 0;
    while(c < 9){
      fill(255, 255, 255, 0);
      rect(c*w*3, 50+i*h*3, w*3, h*3);
      c++;
    }
    i++;
  }
  strokeWeight(4);
  textSize(20);
  i = 0;
  while (i < 2){
    fill(255, 255, 255, 0);
    rect(10+i*130, 5, 120, 35);
    i++;
  }
  i = 0;
  while (i < 2){
    rect(770-i*130, 5, 120, 35);
    i++;
  }
  fill(0);
  text("Easy", 50, 30);
  text("Medium", 166, 30);
  text("Save", 810, 30);
  text("Load", 679, 30);
  text("You got "+score+" have "+scoreLeft()+" left", 300, 30);
}

boolean check(int row, int col, int num) {
  for (int i = 0; i < 9; i++) {
    if (sudoku[row][i] == num) {
      return false;
    }
  }
  for (int i = 0; i < 9; i++) {
    if (sudoku[i][col] == num){
      return false;
    }
  }
  int boxRow = row / 3;
  int boxCol = col / 3;
  for (int i = boxRow * 3; i < boxRow * 3 + 3; i++) {
    for (int j = boxCol * 3; j < boxCol * 3 + 3; j++) {
      if (sudoku[i][j] == num) {
        return false;
      }
    }
  }
  return true;   
}

boolean solveSudoku() {
  for (int row = 0; row < 9; row++) {
    for (int col = 0; col < 9; col++) {
      if (sudoku[row][col] == 0) {
        for (int num = 1; num <= 9; num++) {
          if (check(row, col, num)) {
            sudoku[row][col] = num;
            if (solveSudoku()){
              for (int i = 0; i < 4; i++){
                sudoku = shuffleS(sudoku);
              }
              whatRandom();
              return true;
            }
            sudoku[row][col] = 0;
          }
        }
        return false;
      }
    }
  }
  for (int i = 0; i < 4; i++){
    sudoku = shuffleS(sudoku);
  }
  whatRandom();
  return true;   
}

int[][] shuffleS(int[][] a){
  int len = a.length;
  for (int i = len - 1; i > 0; i--) {
    int j = (int)random(i + 1);
    int[] temp = a[i];
    a[i] = a[j];
    a[j] = temp;
  }
  return a;
}

void mousePressed(){
  clickx = mouseX;
  clicky = mouseY;
  fill(0);
  if (5 < clicky && clicky < 41 && 10 < clickx && clickx < 890){
    if (10 < clickx && clickx < 131){
      howHard = false;
      score = 0;
      input();
      solveSudoku();
      rect(10, 5, 120, 35);
    } else if (140 < clickx && clickx < 261){
      howHard = true;
      score = 0;
      input();
      solveSudoku();
      rect(140, 5, 120, 35);
    } else if (770 < clickx && clickx < 890){
      saveGame();
      rect(770, 5, 120, 35);
    } else if (640 < clickx && clickx < 760){
      loadGame();
      rect(640, 5, 120, 35);
    }
  }
}

void keyPressed(){
  int inNum = 0;
  if (key == 49 | key == 50 | key == 51 | key == 52 | key == 53 | key == 54 | key == 55 | key == 56 | key == 57){
    inNum = key;
    if (inNum == 49){
      inNum = 1;
    }else if (inNum == 50){
      inNum = 2;
    }else if (inNum == 51){
      inNum = 3;
    }else if (inNum == 52){
      inNum = 4;
    }else if (inNum == 53){
      inNum = 5;
    }else if (inNum == 54){
      inNum = 6;
    }else if (inNum == 55){
      inNum = 7;
    }else if (inNum == 56){
      inNum = 8;
    }else if (inNum == 57){
      inNum = 9;
    }
  } else if(key == ENTER){
    checkAns();
  } else{
    inNum = 0;
  }
  if (isItX() == true){
    input[(clicky - 50)/100][realX()] = inNum;
  }
}

int realX(){ //make clicky to true x (it would be same position as whereBlank)
  int i = 0;
  while (i < whereBlank[(clicky - 50)/100].length){
    i++;
  }
  int c = 0;
  while (c < i){
    if (clickx/100 == whereBlank[(clicky - 50)/100][c]){
      return c;
    }
    c++;
  }
  return -1;
}

boolean isItX(){ //check clicky in correct area
  int i = 0;
  while (i < 9){
    int c = 0;
    while (c < whereBlank[i].length){
      if ((clicky-50)/100 == i && clickx/100 == whereBlank[i][c]){
        return true;
      }
      c++;
    }
  i++;
  }
  return false;
}

void whatRandom(){ // find where number should be blank grid(to input)
  int i = 0;
  while (i < 9){
    if (howHard == false){
      numRandom = int(random(7, 9)); //random 7,8
    } else if (howHard == true){
      numRandom = int(random(6, 8)); //random 6,7
    }
    blank[i] = numRandom;
    i++;
  }
  int c = 0;
  while (c < 9){
    i = 0;
    int i0 = 0;
    num = new int[9];
    while(i0 < 9){
        num[i0] = i0;
        i0++;
      }
    while (i < blank[c]){
      int rnum = int(random(0, 9-i));
      num = removeIndex(num, rnum);
      i++;
    }
    whereBlank[c] = new int[num.length];
    i = 0;
    int k = 0;
    while (k < num.length){
      if (k == num.length -1){
        int randoma = int(random(0, 9));
        while (k > 0 && randoma == whereBlank[c][k-1]){ //
          randoma = int(random(0, 9));
        }
        if (num.length == 3){
          while (randoma == whereBlank[c][k-2] | randoma == whereBlank[c][k-1]){
            randoma = int(random(0, 9));
          }
        }
        whereBlank[c][k] = randoma;
      } else {
        whereBlank[c][k] = num[k];
      }
      k++;
    }
    c++;
  }
}

int[] removeIndex(int[] a, int i) {
    int[] newA = new int[a.length - 1];
    int c = 0;
    int k = 0;
    while (k < a.length - 1) {
      if (c == i) {
        c++;
        newA[k] = a[c]; //
      } else{
        newA[k] = a[c];
      }
      k++;
      c++;
    }
    return newA;
}

void checkAns(){
  int i = 0;
  while (i < whereBlank.length){
    int c = 0;
    while (c < whereBlank[i].length){
      if (input[i][c] == sudoku[i][whereBlank[i][c]]){
        whereBlank[i] = removeCheck(whereBlank[i], c);
        input[i][c] = 0;
        score++;
      }
      c++;
    }
    i++;
  }
}

int[] removeCheck(int[] a, int i) {
  if (a.length == 1){
    int[] newA = new int[0];
    return newA;
  }else if (a.length == 2){
    int[] newA = new int[1];
    if (i == 1){
      i = 0;
    } else {
      i = 1;
    }
    newA[0] = a[i];
    return newA;
  }else {
    int[] newA = new int[a.length - 1];
    int c = 0;
    int k = 0;
    while (c < a.length) {
      if (c == i && i == 2){
        newA[0] = a[0];
        newA[1] = a[1];
      }else if (c == i) {
        c++;
        newA[k] = a[c];
      }else {
        newA[k] = a[c];
      }
      k++;
      c++;
    }
    return newA;
  }
}

int scoreLeft(){
  int count = 0;
  int i = 0;
  while (i < 9){
    int c = 0;
    while (c < whereBlank[i].length){
      count++;
      c++;
    }
    i++;
  }
  return count;
}

String[][] intStr(int[][] a){
  String[][] intStr = new String[a.length][];
  for (int i = 0; i < a.length; i++) {
    intStr[i] = new String[a[i].length];
    for (int j = 0; j < a[i].length; j++) {
      intStr[i][j] = str(a[i][j]);
    }
  }
  return intStr;
}

int[][] StrInt(String[][] a){
  int[][] StrInt = new int[a.length][];
  for (int i = 0; i < a.length; i++) {
    StrInt[i] = new int[a[i].length];
    for (int j = 0; j < a[i].length; j++) {
      StrInt[i][j] = int(a[i][j]);
    }
  }
  return StrInt;
}

void saveGame(){
  String filename = "save_sudoku.txt";
  File file = new File(filename);
  file.delete();
  String[][] sudokuA = intStr(sudoku);
  String[][] inputA = intStr(input);
  String[][] whereBlankA = intStr(whereBlank);
  writer = createWriter(filename);
  int i = 0;
  while (i < 9){
    String lineIn = join(sudokuA[i], " ");
    writer.println(lineIn);
    i++;
  }
  i = 0;
  while (i < 9){
    String lineIn = join(inputA[i], " ");
    writer.println(lineIn);
    i++;
  }
  i = 0;
  while (i < 9){
    String lineIn = join(whereBlankA[i], " ");
    writer.println(lineIn);
    i++;
  }
  writer.close();
}

void loadGame() {
  String filename = "save_sudoku.txt";
  String[] lineOut = loadStrings(filename);
  String[][] sudokuA = new String[9][9];
  String[][] inputA = new String[9][9];
  String[][] whereBlankA = new String[9][];
  if (lineOut == null || lineOut.length < 27) {
    return;
  }
  for (int i = 0; i < 9; i++){
    sudokuA[i] = split(lineOut[i], " ");
  }
  for (int i = 9; i < 18; i++){
    inputA[i-9] = split(lineOut[i], " ");
  }
  for (int i = 18; i < 27; i++){
    if (lineOut[i].trim().isEmpty()){
      whereBlankA[i-18] = new String[0];
      i++;
    } else{
      whereBlankA[i-18] = split(lineOut[i], " ");
    }
  }
  sudoku = StrInt(sudokuA);
  input = StrInt(inputA);
  whereBlank = StrInt(whereBlankA);
}
